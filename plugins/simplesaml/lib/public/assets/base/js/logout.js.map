{"version":3,"file":"js/logout.js","mappings":"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","sources":["webpack://simplesamlphp-assets/./resources/js/logout/logout.js","webpack://simplesamlphp-assets/./resources/js/logout/main.js"],"sourcesContent":["'use strict';\n\n/**\n * This class is used for the logout page.\n *\n * It allows the user to start logout from all the services where a session exists (if any). Logout will be\n * triggered by loading an iframe where we send a SAML logout request to the SingleLogoutService endpoint of the\n * given SP. After successful response back from the SP, we will load a small template in the iframe that loads\n * this class again (IFrameLogoutHandler branch of the constructor), and sends a message to the main page\n * (core:logout-iframe branch).\n *\n * The iframes communicate the logout status for their corresponding association via an event message, for which the\n * main page is listening (the clearAssociation() method). Upon reception of a message, we'll check if there was an\n * error or not, and call the appropriate method (either completed() or failed()).\n */\nclass SimpleSAMLLogout {\n    constructor(page)\n    {\n        if (page === 'core:logout-iframe') { // main page\n            this.populateData();\n            if (Object.keys(this.sps).length === 0) {\n                // all SPs completed logout, this was a reload\n                this.btncontinue.click();\n            }\n            this.btnall.addEventListener(\"click\", this.initLogout.bind(this));\n            window.addEventListener('message', this.clearAssociation.bind(this), false);\n        } else if (page === 'IFrameLogoutHandler') { // iframe\n            var data = document.querySelector('i[id=\"data\"]');\n            var message = {\n                spId: data.getAttribute('data-spid')\n            };\n            if (data.hasAttribute('data-error')) {\n                message.error = data.getAttribute('data-error');\n            }\n\n            window.parent.postMessage(JSON.stringify(message), SimpleSAMLLogout.getOrigin());\n        }\n    }\n\n\n    /**\n     * Clear an association when it is signaled from an iframe (either failed or completed).\n     *\n     * @param event The event containing the message from the iframe.\n     */\n    clearAssociation(event)\n    {\n        if (event.origin !== SimpleSAMLLogout.getOrigin()) {\n            // we don't accept events from other origins\n            return;\n        }\n        var data = JSON.parse(event.data);\n        if (typeof data.error === 'undefined') {\n            this.completed(data.spId);\n        } else {\n            this.failed(data.spId, data.error);\n        }\n\n        if (Object.keys(this.sps).length === 0) {\n            if (this.nfailed === 0) {\n                // all SPs successfully logged out, continue w/o user interaction\n                this.btncontinue.click();\n            }\n        }\n    }\n\n\n    /**\n     * Mark logout as completed for a given SP.\n     *\n     * This method will be called by the SimpleSAML\\IdP\\IFrameLogoutHandler class upon successful logout from the SP.\n     *\n     * @param id The ID of the SP that completed logout successfully.\n     */\n    completed(id)\n    {\n        if (typeof this.sps[id] === 'undefined') {\n            return;\n        }\n\n        this.sps[id].icon.classList.remove('fa-spin');\n        this.sps[id].icon.classList.remove('fa-circle-o-notch');\n        this.sps[id].icon.classList.add('fa-check-circle');\n        this.sps[id].element.style.display = \"none\";\n        delete this.sps[id];\n        this.finish();\n    }\n\n\n    /**\n     * Mark logout as failed for a given SP.\n     *\n     * This method will be called by the SimpleSAML\\IdP\\IFrameLogoutHandler class upon logout failure from the SP.\n     *\n     * @param id The ID of the SP that failed to complete logout.\n     * @param reason The reason why logout failed.\n     */\n    failed(id, reason)\n    {\n        if (typeof this.sps[id] === 'undefined') {\n            return;\n        }\n\n        this.sps[id].element.classList.add('error');\n        this.sps[id].icon.classList.remove('fa-spin', 'fa-circle-o-notch');\n        this.sps[id].icon.classList.add('fa-exclamation-circle');\n\n        this.errmsg.classList.remove('hidden');\n        this.errfrm.classList.remove('hidden');\n\n        delete this.sps[id];\n        this.nfailed++;\n        this.finish();\n    }\n\n\n    /**\n     * Finish the logout process, acting according to the current situation:\n     *\n     * - If there were failures, an error message is shown telling the user to close the browser.\n     * - If everything went ok, then we just continue back to the service that started logout.\n     *\n     * Note: this method won't do anything if there are SPs pending logout (e.g. waiting for the timeout).\n     */\n    finish()\n    {\n        if (Object.keys(this.sps).length > 0) { // pending services\n            return;\n        }\n\n        if (typeof this.timeout !== 'undefined') {\n            clearTimeout(this.timeout);\n        }\n\n        if (this.nfailed > 0) { // some services failed to log out\n            this.errmsg.classList.remove('hidden');\n            this.errfrm.classList.remove('hidden');\n            this.actions.classList.add('hidden');\n        } else { // all services done\n            this.btncontinue.click();\n        }\n    }\n\n\n    /**\n     * Get the origin of the current page.\n     */\n    static getOrigin()\n    {\n        var origin = window.location.origin;\n        if (!origin) {\n            // IE < 11 does not support window.location.origin\n            origin = window.location.protocol + \"//\" + window.location.hostname +\n                (window.location.port ? ':' + window.location.port : '');\n        }\n        return origin;\n    }\n\n\n    /**\n     * This method starts logout on all SPs where we are currently logged in.\n     *\n     * @param event The click event on the \"Yes, all services\" button.\n     */\n    initLogout(event)\n    {\n        event.preventDefault();\n\n        this.btnall.disabled = true;\n        this.btncancel.disabled = true;\n        Object.keys(this.sps).forEach((function (id) {\n            this.sps[id].status = 'inprogress';\n            this.sps[id].startTime = (new Date()).getTime();\n            this.sps[id].iframe.setAttribute('src', this.sps[id].iframe.getAttribute('data-url'));\n            this.sps[id].icon.classList.add('fa-spin');\n        }).bind(this));\n        this.initTimeout();\n    }\n\n\n    /**\n     * Set timeouts for all logout operations.\n     *\n     * If an SP didn't reply by the timeout, we'll mark it as failed.\n     */\n    initTimeout()\n    {\n        var timeout = 10;\n\n        for (const id in this.sps) {\n            if (typeof id === 'undefined') {\n                continue;\n            }\n            if (!this.sps.hasOwnProperty(id)) {\n                continue;\n            }\n            if (this.sps[id].status !== 'inprogress') {\n                continue;\n            }\n            var now = ((new Date()).getTime() - this.sps[id].startTime) / 1000;\n\n            if (this.sps[id].timeout <= now) {\n                this.failed(id, 'Timed out', window.document);\n            } else {\n                // get the lowest timeout we have\n                if ((this.sps[id].timeout - now) < timeout) {\n                    timeout = this.sps[id].timeout - now;\n                }\n            }\n        }\n\n        if (Object.keys(this.sps).length > 0) {\n            // we have associations left, check them again as soon as one expires\n            this.timeout = setTimeout(this.initTimeout.bind(this), timeout * 1000);\n        } else {\n            this.finish();\n        }\n    }\n\n\n    /**\n     * This method populates the data we need from data-* properties in the page.\n     */\n    populateData()\n    {\n        this.sps = {};\n        this.btnall = document.querySelector('button[id=\"btn-all\"]');\n        this.btncancel = document.querySelector('button[id=\"btn-cancel\"]');\n        this.btncontinue = document.querySelector('button[id=\"btn-continue\"]');\n        this.actions = document.querySelector('div[id=\"original-actions\"]');\n        this.errmsg = document.querySelector('div[id=\"error-message\"]');\n        this.errfrm = document.querySelector('form[id=\"error-form\"]');\n        this.nfailed = 0;\n        var that = this;\n\n        // initialise SP status and timeout arrays\n        document.querySelectorAll('li[id^=\"sp-\"]').forEach(function (currentValue, index, arr) {\n            var id = currentValue.getAttribute('data-id');\n            var iframe = document.querySelector('iframe[id=\"iframe-' + id + '\"]');\n            var status = currentValue.getAttribute('data-status');\n\n            switch (status) {\n                case 'failed':\n                    that.nfailed++;\n                case 'completed':\n                    return;\n            }\n\n            that.sps[id] = {\n                status: status,\n                timeout: currentValue.getAttribute('data-timeout'),\n                element: currentValue,\n                iframe: iframe,\n                icon: document.querySelector('i[id=\"icon-' + id + '\"]'),\n            };\n        });\n    }\n}\n\nexport default SimpleSAMLLogout;\n","'use strict';\n\nimport SimpleSAMLLogout from './logout.js';\n\nready(function () {\n    new SimpleSAMLLogout(document.body.id);\n});\n"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","_defineProperties","e","r","t","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","i","toPrimitive","call","TypeError","String","_toPrimitive","SimpleSAMLLogout","page","a","n","_classCallCheck","this","populateData","keys","sps","btncontinue","click","btnall","addEventListener","initLogout","bind","window","clearAssociation","data","document","querySelector","message","spId","getAttribute","hasAttribute","error","parent","postMessage","JSON","stringify","getOrigin","value","origin","location","protocol","hostname","port","event","parse","completed","failed","nfailed","id","icon","classList","remove","add","element","style","display","finish","reason","errmsg","errfrm","timeout","clearTimeout","actions","preventDefault","disabled","btncancel","forEach","status","startTime","Date","getTime","iframe","setAttribute","initTimeout","hasOwnProperty","now","setTimeout","that","querySelectorAll","currentValue","index","arr","ready","body"],"sourceRoot":""}